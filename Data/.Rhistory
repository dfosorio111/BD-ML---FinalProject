pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
head(datos)
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
datosts
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(reshape)
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
datos <- datos[-length(datos$Fecha),]
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 6, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
graph <- HWplot3 (datosts, n.ahead = 6) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Limpiar entorno
rm(list = ls())
#Installar paquetes
if(!require(pacman)) install.packages("pacman");require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret) # Classification And REgression Training
## load data
df <- import("https://gitlab.com/Lectures-R/bd-meca-2022-summer/lecture-01/-/raw/main/data/GEIH_sample1.Rds")
db <- as_tibble(df) ## from dataframe to tibble
## print data
head(db)
tail(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
skim(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
R.version()
R.Version()
#Gráfico (muy útil ver lo de data to viz)
ggplot(data = db , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
#Para tener un subset
ggplot(data = db%>%subset(is.na(formal) == FALSE) , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
## density: income by sex
p <- ggplot(data=db) +
geom_histogram(mapping = aes(x=y_ingLab_m , group=as.factor(sex) , fill=as.factor(sex)))
p
p + scale_fill_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
#Para meter temas predefinidos
box_plot <- ggplot(data=db , mapping = aes(as.factor(estrato1) , totalHoursWorked)) +
geom_boxplot()
box_plot
box_plot
## add another geometry
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
## add theme
box_plot + theme_test()
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.5)
h_hour
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.8)
h_hour
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
#trasnformación boxcox
BoxCoxTrans(db$y_ingLab_m , na.rm=T)
?BoxCoxTrans
db = db %>%
group_by(directorio) %>%
mutate(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db)
db_2 = db %>%
group_by(directorio) %>%
summarise(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db_2)
?mvar
??mvar()
#Importar paquetes y cargar librerías
require(pacman)
p_load(tidyverse, rvest, data.table, dplyr, skimr, caret, rio,
vtable, stargazer, ggplot2, boot, MLmetrics, lfe,
tidyverse, fabricatr, stargazer, Hmisc, writexl, viridis, here,
modelsummary, # tidy, msummary
gamlr,        # cv.gamlr
ROCR, # ROC curve
class, readxl, writexl,
glmnet, janitor, doParallel, rattle, fastDummies, tidymodels, themis, AER, randomForest,xgboost, ranger)
#directorio Daniel
setwd("C:/Users/danie/OneDrive/Escritorio/Uniandes/PEG/Big Data and Machine Learning/BD-ML---FinalProject/Data")
#Cargar base de características y composición del hogar
caract_hogar <- read.csv("Caracteristicas y composicion del hogar.csv")
View(caract_hogar)
#Cargar base de características y composición del hogar
caract_hogar <- read.csv("Caracteristicas y composicion del hogar.csv", sep = ";")
View(caract_hogar)
#URL del diccionario de datos
browseURL("https://microdatos.dane.gov.co//catalog/734/get_microdata")
View(caract_hogar)
#Diccionario de Ignacio
browseURL("https://ignaciomsarmiento.github.io/GEIH2018_sample/dictionary.html")
View(caract_hogar)
View(caract_hogar)
#Cargar base de educación
educ <- read.csv("Educacion.csv")
#Cargar base de educación
educ <- read.csv("Educación.csv")
View(educ)
View(educ)
View(educ)
UNION_PRUEBA <- full_join(caract_hogar, educ, by = c("DIRECTORIO", "SECUENCIA_P", "ORDEN"))
View(UNION_PRUEBA)
educ$educ <- 1
UNION_PRUEBA <- full_join(caract_hogar, educ, by = c("DIRECTORIO", "SECUENCIA_P", "ORDEN"))
View(UNION_PRUEBA)
UNION_PRUEBA <- UNION_PRUEBA%>%subset(is.na(educ))
View(UNION_PRUEBA)
#Condiciones de vida del hogar y tenencia de bienes
cond_hogar <- read.csv("Condiciones de vida del hogar y tenencia de bienes.csv")
cond_hogar2 <- read.csv("Condiciones de vida del hogar y tenencia de bienes programas.csv")
View(cond_hogar2)
cond_hogar2 <- read.csv("Condiciones de vida del hogar y tenencia de bienes programas.csv", sep = ";")
View(cond_hogar2)
#Condiciones de vida del hogar y tenencia de bienes
cond_hogar <- read.csv("Condiciones de vida del hogar y tenencia de bienes.csv")
View(cond_hogar)
#Count del orden (llave de persona) de cada base
caract_hogar%>%count(orden)
#Count del orden (llave de persona) de cada base
caract_hogar%>%count(ORDEN)
educ%>%count(ORDEN)
cond_hogar%>%count(ORDEN)
View(caract_hogar)
View(educ)
%>%ungroup()
Valores_nivel_hogar <- educ%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P3341S1, na.rm = TRUE),
valor_uniformes = sum(P3342S1, na.rm = TRUE),
valor_utiles    = sum(P3343S1, na.rm = TRUE),
valor_pension   = sum(P3344S1, na.rm = TRUE),
valor_transporte= sum(P3345S1, na.rm = TRUE),
valor_alimento  = sum(P3346S1, na.rm = TRUE))%>%
ungroup()
View(Valores_nivel_hogar)
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar, 1, sum)
View(Valores_nivel_hogar)
Valores_nivel_hogar <- educ%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P3341S1, na.rm = TRUE),
valor_uniformes = sum(P3342S1, na.rm = TRUE),
valor_utiles    = sum(P3343S1, na.rm = TRUE),
valor_pension   = sum(P3344S1, na.rm = TRUE),
valor_transporte= sum(P3345S1, na.rm = TRUE),
valor_alimento  = sum(P3346S1, na.rm = TRUE))%>%
ungroup()
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar[,select(Valores_nivel_hogar, starts_with("valor_"))], 1, sum)
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar[,-"DIRECTORIO",-"SECUENCIA_P"], 1, sum)
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar[,-DIRECTORIO,-SECUENCIA_P], 1, sum)
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar[,c(-DIRECTORIO,-SECUENCIA_P)], 1, sum)
Valores_nivel_hogar(-DIRECTORIO)
Valores_nivel_hogar[,-DIRECTORIO]
Valores_nivel_hogar <- educ%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P3341S1, na.rm = TRUE),
valor_uniformes = sum(P3342S1, na.rm = TRUE),
valor_utiles    = sum(P3343S1, na.rm = TRUE),
valor_pension   = sum(P3344S1, na.rm = TRUE),
valor_transporte= sum(P3345S1, na.rm = TRUE),
valor_alimento  = sum(P3346S1, na.rm = TRUE))%>%
ungroup()
Valores_nivel_hogar$valor_total <- apply(Valores_nivel_hogar%>%select(-DIRECTORIO,-SECUENCIA_P), 1, sum)
View(Valores_nivel_hogar)
View(cond_hogar)
#Se carga la base "servicios del hogar". En esta base se encuentran los ingresos
servicios_hogar <- read.csv("Servicios del hogar.csv")
#Unir servicios del hogar con valores_nivel_hogar
Union_servicios_valores <- full_join(servicios_hogar, Valores_nivel_hogar)
View(Union_servicios_valores)
View(Union_servicios_valores)
#Atención integral niños y niñas menores de 5 años
de_cero_a_siempre <- read.csv("atención integral de los niños y niñas menores de 5 años.csv")
#Atención integral niños y niñas menores de 5 años
de_cero_a_siempre <- read.csv("Atención integral de los niños y niñas menores de 5 años.csv")
#Atención integral niños y niñas menores de 5 años
de_cero_a_siempre <- read.csv("Cero_a_cinco.csv")
#Atención integral niños y niñas menores de 5 años
de_cero_a_siempre <- read.csv("Cero_a_cinco.csv", sep = ";")
View(de_cero_a_siempre)
View(de_cero_a_siempre)
#Se agrupa el total gastado a nivel hogar por división (para la de cero a siempre)
Valores_nivel_hogar_5 <- de_cero_a_siempre%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P6169S1, na.rm = TRUE),
valor_uniformes = sum(P8564S1, na.rm = TRUE),
valor_utiles    = sum(P8566S1, na.rm = TRUE),
valor_utiles2   = sum(P8568S1, na.rm = TRUE),
valor_pension   = sum(P6191S1, na.rm = TRUE),
valor_transporte= sum(P8572S1, na.rm = TRUE),
valor_alimento  = sum(P8574S1, na.rm = TRUE))%>%
ungroup()
#Se suma el total gastado por hogar en educación
Valores_nivel_hogar_5$valor_total <- apply(Valores_nivel_hogar_5%>%select(-DIRECTORIO,-SECUENCIA_P), 1, sum)
View(Valores_nivel_hogar_5)
#Se agrupa el total gastado a nivel hogar por división (para la de cero a siempre)
Valores_nivel_hogar_5 <- de_cero_a_siempre%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P6169S1, na.rm = TRUE),
valor_uniformes = sum(P8564S1, na.rm = TRUE),
valor_utiles    = sum(P8566S1, na.rm = TRUE),
valor_utiles2   = sum(P8568S1, na.rm = TRUE),
valor_pension   = sum(P6191S1, na.rm = TRUE),
valor_transporte= sum(P8572S1, na.rm = TRUE),
valor_alimento  = sum(P8574S1, na.rm = TRUE))%>%
ungroup()%>%
summarise(valor_matricula = ifelse(valor_matricula == 99, 0, valor_matricula),
valor_uniformes = ifelse(valor_uniformes == 99, 0, valor_uniformes),
valor_utiles    = ifelse(valor_utiles == 99, 0, valor_utiles),
valor_utiles2   = ifelse(valor_utiles2 == 99, 0, valor_utiles2),
valor_pension   = ifelse(valor_pension == 99, 0, valor_pension),
valor_transporte= ifelse(valor_transporte == 99, 0, valor_transporte),
valor_alimento  = ifelse(valor_alimento == 99, 0, valor_alimento))
#Se agrupa el total gastado a nivel hogar por división (para la de cero a siempre)
Valores_nivel_hogar_5 <- de_cero_a_siempre%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = sum(P6169S1, na.rm = TRUE),
valor_uniformes = sum(P8564S1, na.rm = TRUE),
valor_utiles    = sum(P8566S1, na.rm = TRUE),
valor_utiles2   = sum(P8568S1, na.rm = TRUE),
valor_pension   = sum(P6191S1, na.rm = TRUE),
valor_transporte= sum(P8572S1, na.rm = TRUE),
valor_alimento  = sum(P8574S1, na.rm = TRUE))%>%
ungroup()%>%
mutate(valor_matricula = ifelse(valor_matricula == 99, 0, valor_matricula),
valor_uniformes = ifelse(valor_uniformes == 99, 0, valor_uniformes),
valor_utiles    = ifelse(valor_utiles == 99, 0, valor_utiles),
valor_utiles2   = ifelse(valor_utiles2 == 99, 0, valor_utiles2),
valor_pension   = ifelse(valor_pension == 99, 0, valor_pension),
valor_transporte= ifelse(valor_transporte == 99, 0, valor_transporte),
valor_alimento  = ifelse(valor_alimento == 99, 0, valor_alimento))
View(Valores_nivel_hogar_5)
#Se suma el total gastado por hogar en educación
Valores_nivel_hogar_5$valor_total <- apply(Valores_nivel_hogar_5%>%select(-DIRECTORIO,-SECUENCIA_P), 1, sum)
View(Valores_nivel_hogar_5)
#Unir servicios del hogar con valores_nivel_hogar_5 (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores <- full_join(servicios_hogar_5, Valores_nivel_hogar)
#Unir servicios del hogar con valores_nivel_hogar_5 (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores <- full_join(servicios_hogar, Valores_nivel_hogar_5)
#Unir servicios del hogar con valores_nivel_hogar (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores <- full_join(servicios_hogar, Valores_nivel_hogar)
#Unir servicios del hogar con valores_nivel_hogar_5 (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores_5 <- full_join(servicios_hogar, Valores_nivel_hogar_5)
#Unir servicios del hogar con valores_nivel_hogar_5 (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores_5 <- left_join(Valores_nivel_hogar_5, servicios_hogar)
View(Union_servicios_valores_5)
Union_servicios_valores_5$paga_algo <- ifelse(Union_servicios_valores_5$valor_total>0,1,0)
Union_servicios_valores_5%>%count(paga_algo)
sum(is.na(Union_servicios_valores_5$I_HOGAR))
Union_servicios_valores_5 <- Union_servicios_valores_5%>%mutate(Variable_y = valor_total/I_HOGAR)
View(Union_servicios_valores_5)
View(Union_servicios_valores_5%>%subset(valor_total>0))
Union_servicios_valores_5 <- Union_servicios_valores_5%>%mutate(Variable_y = 100*valor_total/I_HOGAR)
View(Union_servicios_valores_5%>%subset(valor_total>0))
PRUEBA <- Union_servicios_valores_5%>%subset(valor_total>0)
hist(PRUEBA$Variable_y)
summary(PRUEBA$Variable_y)
PRUEBA <- Union_servicios_valores_5%>%subset(valor_total>0)%>%subset(!is.na(I_HOGAR))
hist(PRUEBA$Variable_y)
summary(PRUEBA$Variable_y)
PRUEBA <- Union_servicios_valores_5%>%subset(valor_total>0)%>%subset(!is.na(I_HOGAR)&I_HOGAR>0)
hist(PRUEBA$Variable_y)
summary(PRUEBA$Variable_y)
View(Valores_nivel_hogar_5)
View(Union_servicios_valores_5)
View(PRUEBA)
View(PRUEBA%>%select(I_HOGAR, valor_total, Variable_y))
View(PRUEBA%>%select(I_HOGAR, valor_matricula, valor_total, Variable_y))
Union_servicios_valores <- Union_servicios_valores%>%mutate(Variable_y = 100*valor_total/I_HOGAR)
View(Union_servicios_valores)
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.01))
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.005))
View(Valores_nivel_hogar_5)
View(Union_servicios_valores_5)
View(PRUEBA)
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.25))
#Se agrupa el total gastado a nivel hogar por división (para la de cero a siempre)
Valores_nivel_hogar_5 <- de_cero_a_siempre%>%group_by(DIRECTORIO, SECUENCIA_P)%>%
summarise(valor_matricula = 12*sum(P6169S1, na.rm = TRUE),
valor_uniformes = sum(P8564S1, na.rm = TRUE),
valor_utiles    = sum(P8566S1, na.rm = TRUE),
valor_utiles2   = sum(P8568S1, na.rm = TRUE),
valor_pension   = 12*sum(P6191S1, na.rm = TRUE),
valor_transporte= 12*sum(P8572S1, na.rm = TRUE),
valor_alimento  = 12*sum(P8574S1, na.rm = TRUE))%>%
ungroup()%>%
mutate(valor_matricula = ifelse(valor_matricula == 99, 0, valor_matricula),
valor_uniformes = ifelse(valor_uniformes == 99, 0, valor_uniformes),
valor_utiles    = ifelse(valor_utiles == 99, 0, valor_utiles),
valor_utiles2   = ifelse(valor_utiles2 == 99, 0, valor_utiles2),
valor_pension   = ifelse(valor_pension == 99, 0, valor_pension),
valor_transporte= ifelse(valor_transporte == 99, 0, valor_transporte),
valor_alimento  = ifelse(valor_alimento == 99, 0, valor_alimento))
#Se suma el total gastado por hogar en educación
Valores_nivel_hogar_5$valor_total <- apply(Valores_nivel_hogar_5%>%select(-DIRECTORIO,-SECUENCIA_P), 1, sum)
#Unir servicios del hogar con valores_nivel_hogar (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores <- full_join(servicios_hogar, Valores_nivel_hogar)
#Unir servicios del hogar con valores_nivel_hogar_5 (Se unen por DIRECTORIO Y SECUENCIA)
Union_servicios_valores_5 <- left_join(Valores_nivel_hogar_5, servicios_hogar)
Union_servicios_valores_5$paga_algo <- ifelse(Union_servicios_valores_5$valor_total>0,1,0)
Union_servicios_valores_5%>%count(paga_algo)
Union_servicios_valores_5 <- Union_servicios_valores_5%>%mutate(Variable_y = 100*valor_total/(12*I_HOGAR))
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.25))
PRUEBA <- Union_servicios_valores_5%>%subset(valor_total>0)%>%subset(!is.na(I_HOGAR)&I_HOGAR>0)
hist(PRUEBA$Variable_y)
summary(PRUEBA$Variable_y)
View(PRUEBA%>%select(I_HOGAR, valor_matricula, valor_total, Variable_y))
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.05))
quantile(PRUEBA$Variable_y, probs = seq(0,1,0.005))
PRUEBA2 <- PRUEBA%>%subset(Variable_y > 0.002 & Variable_y < 90)
View(PRUEBA2)
View(PRUEBA2%>%select(I_HOGAR, valor_matricula, valor_total, Variable_y))
hist(PRUEBA2$Variable_y)
